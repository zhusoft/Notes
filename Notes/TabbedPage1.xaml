<?xml version="1.0" encoding="utf-8" ?>
<TabbedPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             x:Class="Notes.TabbedPage1"
             xmlns:android="clr-namespace:Xamarin.Forms.PlatformConfiguration.AndroidSpecific;assembly=Xamarin.Forms.Core"
            android:TabbedPage.ToolbarPlacement="Bottom"
            android:TabbedPage.BarItemColor="#666666"
            android:TabbedPage.BarSelectedItemColor="Black"
            >
  <!--Pages can be added as references or inline-->
    <ContentPage Title="首页" >
        <ScrollView VerticalOptions="FillAndExpand"
                    Margin="10">

            <Label Text=
"Sometimes page content fits entirely on
the page. That's very convenient. But
on many occasions, the content of the page
is much too large for the page, or only
becomes available at runtime.
&#10;&#10;For cases such as these, the ScrollView
provides a solution. Simply set its
Content property to your content &#x2014; in this
case a Label but in the general case very
likely a Layout derivative with multiple
children &#x2014; and the ScrollView provides
scrolling with the distinctive look and touch
familiar to the user.
&#10;&#10;The ScrollView is also capable of
horizontal scrolling, and while that's
usually not as common as vertical scrolling,
sometimes it comes in handy.
&#10;&#10;Most often, the content of a ScrollView is
a StackLayout. Whenever you're using a
StackLayout with a number of items determined
only at runtime, you should probably put it in
a ScrollView just to be sure your stuff doesn't
go running off the bottom of the screen."

                FontSize="Large" />
        </ScrollView>
    </ContentPage>
   
    <ContentPage Title="管理" />
  <ContentPage Title="我的" />
</TabbedPage>